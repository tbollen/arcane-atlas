enum UserRole {
  ADMIN
  USER
}

// Generated using Better Auth Prisma Extension
model User {
  // User login info
  id            String    @id @unique @default(dbgenerated("(concat('user:', gen_random_uuid()))::TEXT"))
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?   @default(dbgenerated("(concat('https://robohash.org/', random()))::TEXT"))
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  //role          UserRole  @default(USER) //Added
  sessions      Session[]
  accounts      Account[]
  passkeys      Passkey[]

  /////////////////////
  // User data links //
  ////////////////////
  // CARDS
  ownedCards    card[]    @relation("CardOwner")    //Cards this user owns
  editableCards card[]    @relation("CardEditors")  //Cards this user can edit
  viewableCards card[]    @relation("CardViewers")  //Cards this user can view

  // CHARACTER
  ownedCharacters Character[] @relation("CharacterOwner")
  viewableCharacters Character[] @relation("CharacterViewers")

  // CAMPAIGNS
  activeCampaigns Campaign[] @relation("CampaignMember")
  gmCampaigns     Campaign[] @relation("CampaignGM")


  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?
  aaguid       String?

  @@map("passkey")
}